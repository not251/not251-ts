import * as not251 from "../src";
/*

describe("quantize", () => {
  //quantize
  it("should quantize a note", () => {
    let intervalVector = new not251.intervalVector(
      [2, 2, 1, 2, 2, 2, 1],
      12,
      0
    );
    let scale1 = not251.scale(intervalVector, 0, 0, 0, false, false, 0);
    let intervalVector2 = new not251.intervalVector(
      [2, 1, 2, 2, 2, 1, 2],
      12,
      0
    );
    let scale2 = not251.scale(intervalVector2, 0, 0, 0, false, false, 0);
    let out = not251.transpose(scale1, scale2, 0, 1, [0, 2, 4]);

    expect(out.degrees).toEqual([0, 1, 2]);
    expect(out.notes).toEqual([1, 3, 4]);
  });
});

describe("autogrado", () => {
  it("find closest degree ", () => {
    let result = not251.autoGrado(
      [
        not251.scale(
          new not251.intervalVector([2, 2, 1, 2, 2, 2, 1], 12, 0),
          0,
          0,
          0,
          false,
          false,
          0
        ),
      ],
      1,
      new not251.intervalVector([2, 2, 3], 7, 0),
      new not251.positionVector([0, 4, 7], 12, 12)
    );

    expect(result.scale.data).toEqual([0, 2, 4, 5, 7, 9, 11]);
    expect(result.grado).toEqual(-3);
    expect(result.result.data).toEqual([-1, 2, 7]);
  });
});

describe("autogrado", () => {
  it("find closest degree ", () => {
    let result = not251.autoGrado(
      [
        not251.scale(
          new not251.intervalVector([2, 2, 1, 2, 2, 2, 1], 12, 0),
          0,
          0,
          0,
          false,
          false,
          0
        ),
      ],
      3,
      new not251.intervalVector([2, 2, 3], 7, 0),
      new not251.positionVector([0, 4, 7], 12, 12)
    );

    expect(result.scale.data).toEqual([0, 2, 4, 5, 7, 9, 11]);
    expect(result.grado).toEqual(3);
    expect(result.result.data).toEqual([0, 5, 9]);
  });
});

describe("autogrado", () => {
  it("find closest degree ", () => {
    let result = not251.autoGrado(
      [
        not251.scale(
          new not251.intervalVector([2, 2, 1, 2, 2, 2, 1], 12, 0),
          0,
          0,
          0,
          false,
          false,
          0
        ),
      ],
      6,
      new not251.intervalVector([2, 2, 3], 7, 0),
      new not251.positionVector([0, 4, 7], 12, 12)
    );

    expect(result.scale.data).toEqual([0, 2, 4, 5, 7, 9, 11]);
    expect(result.grado).toEqual(2);
    expect(result.result.data).toEqual([-1, 4, 7]);
  });
});

describe("autoroot", () => {
  it("find closest root ", () => {
    let result = not251.autoRoot(
      new not251.positionVector([0, 2, 4, 5, 7, 9, 11], 12, 12),
      [66]
    );

    expect(result).toEqual(7);
  });
});

describe("autoroot", () => {
  it("find closest root ", () => {
    let result = not251.autoRoot(
      new not251.positionVector([0, 2, 4, 5, 7, 9, 11], 12, 12),
      [61, 66]
    );

    expect(result).toEqual(2);
  });
});
*/
